!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(e.s=36)}([function(t,e){"function"==typeof Object.create?t.exports=function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t}},function(t,e,n){function r(){return"WebkitAppearance"in document.documentElement.style||window.console&&(console.firebug||console.exception&&console.table)||navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31}function o(){var t=arguments,n=this.useColors;if(t[0]=(n?"%c":"")+this.namespace+(n?" %c":" ")+t[0]+(n?"%c ":" ")+"+"+e.humanize(this.diff),!n)return t;var r="color: "+this.color;t=[t[0],r,"color: inherit"].concat(Array.prototype.slice.call(t,1));var o=0,i=0;return t[0].replace(/%[a-z%]/g,function(t){"%%"!==t&&(o++,"%c"===t&&(i=o))}),t.splice(i,0,r),t}function i(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)}function s(t){try{null==t?e.storage.removeItem("debug"):e.storage.debug=t}catch(n){}}function a(){var t;try{t=e.storage.debug}catch(n){}return t}function c(){try{return window.localStorage}catch(t){}}e=t.exports=n(37),e.log=i,e.formatArgs=o,e.save=s,e.load=a,e.useColors=r,e.storage="undefined"!=typeof chrome&&"undefined"!=typeof chrome.storage?chrome.storage.local:c(),e.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],e.formatters.j=function(t){return JSON.stringify(t)},e.enable(a())},function(t,e){function n(){u=!1,s.length?c=s.concat(c):l=-1,c.length&&r()}function r(){if(!u){var t=setTimeout(n);u=!0;for(var e=c.length;e;){for(s=c,c=[];++l<e;)s&&s[l].run();l=-1,e=c.length}s=null,u=!1,clearTimeout(t)}}function o(t,e){this.fun=t,this.array=e}function i(){}var s,a=t.exports={},c=[],u=!1,l=-1;a.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new o(t,e)),1!==c.length||u||setTimeout(r,0)},o.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=i,a.addListener=i,a.once=i,a.off=i,a.removeListener=i,a.removeAllListeners=i,a.emit=i,a.binding=function(t){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(t){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},function(t,e,n){"use strict";function r(){i.call(this)}var o=n(0),i=n(19);o(r,i),r.prototype.removeAllListeners=function(t){t?delete this._listeners[t]:this._listeners={}},r.prototype.once=function(t,e){function n(){r.removeListener(t,n),o||(o=!0,e.apply(this,arguments))}var r=this,o=!1;this.on(t,n)},r.prototype.emit=function(){var t=arguments[0],e=this._listeners[t];if(e){for(var n=arguments.length,r=new Array(n-1),o=1;n>o;o++)r[o-1]=arguments[o];for(var i=0;i<e.length;i++)e[i].apply(this,r)}},r.prototype.on=r.prototype.addListener=i.prototype.addEventListener,r.prototype.removeListener=i.prototype.removeEventListener,t.exports.EventEmitter=r},function(t,e,n){(function(e){"use strict";var r=n(18),o=function(){};"production"!==e.env.NODE_ENV&&(o=n(1)("sockjs-client:utils:url")),t.exports={getOrigin:function(t){if(!t)return null;var e=new r(t);if("file:"===e.protocol)return null;var n=e.port;return n||(n="https:"===e.protocol?"443":"80"),e.protocol+"//"+e.hostname+":"+n},isOriginEqual:function(t,e){var n=this.getOrigin(t)===this.getOrigin(e);return o("same",t,e,n),n},isSchemeEqual:function(t,e){return t.split(":")[0]===e.split(":")[0]},addPath:function(t,e){var n=t.split("?");return n[0]+e+(n[1]?"?"+n[1]:"")},addQuery:function(t,e){return t+(-1===t.indexOf("?")?"?"+e:"&"+e)}}}).call(e,n(2))},function(t,e,n){(function(t,r){var o;(function(){function i(t,e){function n(t){if(n[t]!==m)return n[t];var i;if("bug-string-char-index"==t)i="a"!="a"[0];else if("json"==t)i=n("json-stringify")&&n("json-parse");else{var s,a='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==t){var u=e.stringify,l="function"==typeof u&&g;if(l){(s=function(){return 1}).toJSON=s;try{l="0"===u(0)&&"0"===u(new r)&&'""'==u(new o)&&u(b)===m&&u(m)===m&&u()===m&&"1"===u(s)&&"[1]"==u([s])&&"[null]"==u([m])&&"null"==u(null)&&"[null,null,null]"==u([m,b,null])&&u({a:[s,!0,!1,null,"\x00\b\n\f\r	"]})==a&&"1"===u(null,s)&&"[\n 1,\n 2\n]"==u([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==u(new c(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==u(new c(864e13))&&'"-000001-01-01T00:00:00.000Z"'==u(new c(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==u(new c(-1))}catch(f){l=!1}}i=l}if("json-parse"==t){var h=e.parse;if("function"==typeof h)try{if(0===h("0")&&!h(!1)){s=h(a);var d=5==s.a.length&&1===s.a[0];if(d){try{d=!h('"	"')}catch(f){}if(d)try{d=1!==h("01")}catch(f){}if(d)try{d=1!==h("1.")}catch(f){}}}}catch(f){d=!1}i=d}}return n[t]=!!i}t||(t=u.Object()),e||(e=u.Object());var r=t.Number||u.Number,o=t.String||u.String,s=t.Object||u.Object,c=t.Date||u.Date,l=t.SyntaxError||u.SyntaxError,f=t.TypeError||u.TypeError,h=t.Math||u.Math,d=t.JSON||u.JSON;"object"==typeof d&&d&&(e.stringify=d.stringify,e.parse=d.parse);var p,v,m,y=s.prototype,b=y.toString,g=new c(-0xc782b5b800cec);try{g=-109252==g.getUTCFullYear()&&0===g.getUTCMonth()&&1===g.getUTCDate()&&10==g.getUTCHours()&&37==g.getUTCMinutes()&&6==g.getUTCSeconds()&&708==g.getUTCMilliseconds()}catch(w){}if(!n("json")){var E="[object Function]",_="[object Date]",x="[object Number]",S="[object String]",O="[object Array]",N="[object Boolean]",T=n("bug-string-char-index");if(!g)var C=h.floor,k=[0,31,59,90,120,151,181,212,243,273,304,334],j=function(t,e){return k[e]+365*(t-1970)+C((t-1969+(e=+(e>1)))/4)-C((t-1901+e)/100)+C((t-1601+e)/400)};if((p=y.hasOwnProperty)||(p=function(t){var e,n={};return(n.__proto__=null,n.__proto__={toString:1},n).toString!=b?p=function(t){var e=this.__proto__,n=t in(this.__proto__=null,this);return this.__proto__=e,n}:(e=n.constructor,p=function(t){var n=(this.constructor||e).prototype;return t in this&&!(t in n&&this[t]===n[t])}),n=null,p.call(this,t)}),v=function(t,e){var n,r,o,i=0;(n=function(){this.valueOf=0}).prototype.valueOf=0,r=new n;for(o in r)p.call(r,o)&&i++;return n=r=null,i?v=2==i?function(t,e){var n,r={},o=b.call(t)==E;for(n in t)o&&"prototype"==n||p.call(r,n)||!(r[n]=1)||!p.call(t,n)||e(n)}:function(t,e){var n,r,o=b.call(t)==E;for(n in t)o&&"prototype"==n||!p.call(t,n)||(r="constructor"===n)||e(n);(r||p.call(t,n="constructor"))&&e(n)}:(r=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],v=function(t,e){var n,o,i=b.call(t)==E,s=!i&&"function"!=typeof t.constructor&&a[typeof t.hasOwnProperty]&&t.hasOwnProperty||p;for(n in t)i&&"prototype"==n||!s.call(t,n)||e(n);for(o=r.length;n=r[--o];s.call(t,n)&&e(n));}),v(t,e)},!n("json-stringify")){var A={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},I="000000",L=function(t,e){return(I+(e||0)).slice(-t)},R="\\u00",M=function(t){for(var e='"',n=0,r=t.length,o=!T||r>10,i=o&&(T?t.split(""):t);r>n;n++){var s=t.charCodeAt(n);switch(s){case 8:case 9:case 10:case 12:case 13:case 34:case 92:e+=A[s];break;default:if(32>s){e+=R+L(2,s.toString(16));break}e+=o?i[n]:t.charAt(n)}}return e+'"'},P=function(t,e,n,r,o,i,s){var a,c,u,l,h,d,y,g,w,E,T,k,A,I,R,U;try{a=e[t]}catch(D){}if("object"==typeof a&&a)if(c=b.call(a),c!=_||p.call(a,"toJSON"))"function"==typeof a.toJSON&&(c!=x&&c!=S&&c!=O||p.call(a,"toJSON"))&&(a=a.toJSON(t));else if(a>-1/0&&1/0>a){if(j){for(h=C(a/864e5),u=C(h/365.2425)+1970-1;j(u+1,0)<=h;u++);for(l=C((h-j(u,0))/30.42);j(u,l+1)<=h;l++);h=1+h-j(u,l),d=(a%864e5+864e5)%864e5,y=C(d/36e5)%24,g=C(d/6e4)%60,w=C(d/1e3)%60,E=d%1e3}else u=a.getUTCFullYear(),l=a.getUTCMonth(),h=a.getUTCDate(),y=a.getUTCHours(),g=a.getUTCMinutes(),w=a.getUTCSeconds(),E=a.getUTCMilliseconds();a=(0>=u||u>=1e4?(0>u?"-":"+")+L(6,0>u?-u:u):L(4,u))+"-"+L(2,l+1)+"-"+L(2,h)+"T"+L(2,y)+":"+L(2,g)+":"+L(2,w)+"."+L(3,E)+"Z"}else a=null;if(n&&(a=n.call(e,t,a)),null===a)return"null";if(c=b.call(a),c==N)return""+a;if(c==x)return a>-1/0&&1/0>a?""+a:"null";if(c==S)return M(""+a);if("object"==typeof a){for(I=s.length;I--;)if(s[I]===a)throw f();if(s.push(a),T=[],R=i,i+=o,c==O){for(A=0,I=a.length;I>A;A++)k=P(A,a,n,r,o,i,s),T.push(k===m?"null":k);U=T.length?o?"[\n"+i+T.join(",\n"+i)+"\n"+R+"]":"["+T.join(",")+"]":"[]"}else v(r||a,function(t){var e=P(t,a,n,r,o,i,s);e!==m&&T.push(M(t)+":"+(o?" ":"")+e)}),U=T.length?o?"{\n"+i+T.join(",\n"+i)+"\n"+R+"}":"{"+T.join(",")+"}":"{}";return s.pop(),U}};e.stringify=function(t,e,n){var r,o,i,s;if(a[typeof e]&&e)if((s=b.call(e))==E)o=e;else if(s==O){i={};for(var c,u=0,l=e.length;l>u;c=e[u++],s=b.call(c),(s==S||s==x)&&(i[c]=1));}if(n)if((s=b.call(n))==x){if((n-=n%1)>0)for(r="",n>10&&(n=10);r.length<n;r+=" ");}else s==S&&(r=n.length<=10?n:n.slice(0,10));return P("",(c={},c[""]=t,c),o,i,r,"",[])}}if(!n("json-parse")){var U,D,B=o.fromCharCode,V={92:"\\",34:'"',47:"/",98:"\b",116:"	",110:"\n",102:"\f",114:"\r"},W=function(){throw U=D=null,l()},F=function(){for(var t,e,n,r,o,i=D,s=i.length;s>U;)switch(o=i.charCodeAt(U)){case 9:case 10:case 13:case 32:U++;break;case 123:case 125:case 91:case 93:case 58:case 44:return t=T?i.charAt(U):i[U],U++,t;case 34:for(t="@",U++;s>U;)if(o=i.charCodeAt(U),32>o)W();else if(92==o)switch(o=i.charCodeAt(++U)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:t+=V[o],U++;break;case 117:for(e=++U,n=U+4;n>U;U++)o=i.charCodeAt(U),o>=48&&57>=o||o>=97&&102>=o||o>=65&&70>=o||W();t+=B("0x"+i.slice(e,U));break;default:W()}else{if(34==o)break;for(o=i.charCodeAt(U),e=U;o>=32&&92!=o&&34!=o;)o=i.charCodeAt(++U);t+=i.slice(e,U)}if(34==i.charCodeAt(U))return U++,t;W();default:if(e=U,45==o&&(r=!0,o=i.charCodeAt(++U)),o>=48&&57>=o){for(48==o&&(o=i.charCodeAt(U+1),o>=48&&57>=o)&&W(),r=!1;s>U&&(o=i.charCodeAt(U),o>=48&&57>=o);U++);if(46==i.charCodeAt(U)){for(n=++U;s>n&&(o=i.charCodeAt(n),o>=48&&57>=o);n++);n==U&&W(),U=n}if(o=i.charCodeAt(U),101==o||69==o){for(o=i.charCodeAt(++U),43!=o&&45!=o||U++,n=U;s>n&&(o=i.charCodeAt(n),o>=48&&57>=o);n++);n==U&&W(),U=n}return+i.slice(e,U)}if(r&&W(),"true"==i.slice(U,U+4))return U+=4,!0;if("false"==i.slice(U,U+5))return U+=5,!1;if("null"==i.slice(U,U+4))return U+=4,null;W()}return"$"},q=function(t){var e,n;if("$"==t&&W(),"string"==typeof t){if("@"==(T?t.charAt(0):t[0]))return t.slice(1);if("["==t){for(e=[];t=F(),"]"!=t;n||(n=!0))n&&(","==t?(t=F(),"]"==t&&W()):W()),","==t&&W(),e.push(q(t));return e}if("{"==t){for(e={};t=F(),"}"!=t;n||(n=!0))n&&(","==t?(t=F(),"}"==t&&W()):W()),","!=t&&"string"==typeof t&&"@"==(T?t.charAt(0):t[0])&&":"==F()||W(),e[t.slice(1)]=q(F());return e}W()}return t},J=function(t,e,n){var r=G(t,e,n);r===m?delete t[e]:t[e]=r},G=function(t,e,n){var r,o=t[e];if("object"==typeof o&&o)if(b.call(o)==O)for(r=o.length;r--;)J(o,r,n);else v(o,function(t){J(o,t,n)});return n.call(t,e,o)};e.parse=function(t,e){var n,r;return U=0,D=""+t,n=q(F()),"$"!=F()&&W(),U=D=null,e&&b.call(e)==E?G((r={},r[""]=n,r),"",e):n}}}return e.runInContext=i,e}var s=n(67),a={"function":!0,object:!0},c=a[typeof e]&&e&&!e.nodeType&&e,u=a[typeof window]&&window||this,l=c&&a[typeof t]&&t&&!t.nodeType&&"object"==typeof r&&r;if(!l||l.global!==l&&l.window!==l&&l.self!==l||(u=l),c&&!s)i(u,c);else{var f=u.JSON,h=u.JSON3,d=!1,p=i(u,u.JSON3={noConflict:function(){return d||(d=!0,u.JSON=f,u.JSON3=h,f=h=null),p}});u.JSON={parse:p.parse,stringify:p.stringify}}s&&(o=function(){return p}.call(e,n,e,t),!(void 0!==o&&(t.exports=o)))}).call(this)}).call(e,n(68)(t),function(){return this}())},function(t,e,n){(function(e){"use strict";var r=n(8),o={},i=!1,s=e.chrome&&e.chrome.app&&e.chrome.app.runtime;t.exports={attachEvent:function(t,n){"undefined"!=typeof e.addEventListener?e.addEventListener(t,n,!1):e.document&&e.attachEvent&&(e.document.attachEvent("on"+t,n),e.attachEvent("on"+t,n))},detachEvent:function(t,n){"undefined"!=typeof e.addEventListener?e.removeEventListener(t,n,!1):e.document&&e.detachEvent&&(e.document.detachEvent("on"+t,n),e.detachEvent("on"+t,n))},unloadAdd:function(t){if(s)return null;var e=r.string(8);return o[e]=t,i&&setTimeout(this.triggerUnloadCallbacks,0),e},unloadDel:function(t){t in o&&delete o[t]},triggerUnloadCallbacks:function(){for(var t in o)o[t](),delete o[t]}};var a=function(){i||(i=!0,t.exports.triggerUnloadCallbacks())};s||t.exports.attachEvent("unload",a)}).call(e,function(){return this}())},function(t,e,n){(function(e){"use strict";function r(t){return function(e,n,r){c("create ajax sender",e,n);var o={};"string"==typeof n&&(o.headers={"Content-type":"text/plain"});var i=s.addPath(e,"/xhr_send"),a=new t("POST",i,n,o);return a.once("finish",function(t){return c("finish",t),a=null,200!==t&&204!==t?r(new Error("http status "+t)):void r()}),function(){c("abort"),a.close(),a=null;var t=new Error("Aborted");t.code=1e3,r(t)}}}function o(t,e,n,o){a.call(this,t,e,r(o),n,o)}var i=n(0),s=n(4),a=n(28),c=function(){};"production"!==e.env.NODE_ENV&&(c=n(1)("sockjs-client:ajax-based")),i(o,a),t.exports=o}).call(e,n(2))},function(t,e,n){"use strict";var r=n(62),o="abcdefghijklmnopqrstuvwxyz012345";t.exports={string:function(t){for(var e=o.length,n=r.randomBytes(t),i=[],s=0;t>s;s++)i.push(o.substr(n[s]%e,1));return i.join("")},number:function(t){return Math.floor(Math.random()*t)},numberString:function(t){var e=(""+(t-1)).length,n=new Array(e+1).join("0");return(n+this.number(t)).slice(-e)}}},function(t,e,n){"use strict";function r(t,e,n){i.call(this,t,e,n,{noCredentials:!0})}var o=n(0),i=n(23);o(r,i),r.enabled=i.enabled,t.exports=r},function(t,e){(function(e){"use strict";t.exports={isOpera:function(){return e.navigator&&/opera/i.test(e.navigator.userAgent)},isKonqueror:function(){return e.navigator&&/konqueror/i.test(e.navigator.userAgent)},hasDomain:function(){if(!e.document)return!0;try{return!!e.document.domain}catch(t){return!1}}}}).call(e,function(){return this}())},function(t,e,n){(function(e,r){"use strict";var o=n(6),i=n(5),s=n(10),a=function(){};"production"!==e.env.NODE_ENV&&(a=n(1)("sockjs-client:utils:iframe")),t.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){t.exports.WPrefix in r||(r[t.exports.WPrefix]={})},postMessage:function(e,n){r.parent!==r?r.parent.postMessage(i.stringify({windowId:t.exports.currentWindowId,type:e,data:n||""}),"*"):a("Cannot postMessage, no parent window.",e,n)},createIframe:function(t,e){var n,i,s=r.document.createElement("iframe"),c=function(){a("unattach"),clearTimeout(n);try{s.onload=null}catch(t){}s.onerror=null},u=function(){a("cleanup"),s&&(c(),setTimeout(function(){s&&s.parentNode.removeChild(s),s=null},0),o.unloadDel(i))},l=function(t){a("onerror",t),s&&(u(),e(t))},f=function(t,e){a("post",t,e);try{setTimeout(function(){s&&s.contentWindow&&s.contentWindow.postMessage(t,e)},0)}catch(n){}};return s.src=t,s.style.display="none",s.style.position="absolute",s.onerror=function(){l("onerror")},s.onload=function(){a("onload"),clearTimeout(n),n=setTimeout(function(){l("onload timeout")},2e3)},r.document.body.appendChild(s),n=setTimeout(function(){l("timeout")},15e3),i=o.unloadAdd(u),{post:f,cleanup:u,loaded:c}},createHtmlfile:function(e,n){var i,s,c,u=["Active"].concat("Object").join("X"),l=new r[u]("htmlfile"),f=function(){clearTimeout(i),c.onerror=null},h=function(){l&&(f(),o.unloadDel(s),c.parentNode.removeChild(c),c=l=null,CollectGarbage())},d=function(t){a("onerror",t),l&&(h(),n(t))},p=function(t,e){try{setTimeout(function(){c&&c.contentWindow&&c.contentWindow.postMessage(t,e)},0)}catch(n){}};l.open(),l.write('<html><script>document.domain="'+r.document.domain+'";</script></html>'),l.close(),l.parentWindow[t.exports.WPrefix]=r[t.exports.WPrefix];var v=l.createElement("div");return l.body.appendChild(v),c=l.createElement("iframe"),v.appendChild(c),c.src=e,c.onerror=function(){d("onerror")},i=setTimeout(function(){d("timeout")},15e3),s=o.unloadAdd(h),{post:p,cleanup:h,loaded:f}}},t.exports.iframeEnabled=!1,r.document&&(t.exports.iframeEnabled=("function"==typeof r.postMessage||"object"==typeof r.postMessage)&&!s.isKonqueror())}).call(e,n(2),function(){return this}())},function(t,e,n){(function(e){"use strict";function r(t,e){s(t),i.call(this);var n=this;this.bufferPosition=0,this.xo=new e("POST",t,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",function(t,e){s("finish",t,e),n._chunkHandler(t,e),n.xo=null;var r=200===t?"network":"permanent";s("close",r),n.emit("close",null,r),n._cleanup()})}var o=n(0),i=n(3).EventEmitter,s=function(){};"production"!==e.env.NODE_ENV&&(s=n(1)("sockjs-client:receiver:xhr")),o(r,i),r.prototype._chunkHandler=function(t,e){if(s("_chunkHandler",t),200===t&&e)for(var n=-1;;this.bufferPosition+=n+1){var r=e.slice(this.bufferPosition);if(n=r.indexOf("\n"),-1===n)break;var o=r.slice(0,n);o&&(s("message",o),this.emit("message",o))}},r.prototype._cleanup=function(){s("_cleanup"),this.removeAllListeners()},r.prototype.abort=function(){s("abort"),this.xo&&(this.xo.close(),s("close"),this.emit("close",null,"user"),this.xo=null),this._cleanup()},t.exports=r}).call(e,n(2))},function(t,e,n){"use strict";function r(t,e,n,r){i.call(this,t,e,n,r)}var o=n(0),i=n(23);o(r,i),r.enabled=i.enabled&&i.supportsCORS,t.exports=r},function(t,e){"use strict";function n(t){this.type=t}n.prototype.initEvent=function(t,e,n){return this.type=t,this.bubbles=e,this.cancelable=n,this.timeStamp=+new Date,this},n.prototype.stopPropagation=function(){},n.prototype.preventDefault=function(){},n.CAPTURING_PHASE=1,n.AT_TARGET=2,n.BUBBLING_PHASE=3,t.exports=n},function(t,e,n){(function(e){"use strict";var r=n(0),o=n(27),i=n(17);t.exports=function(t){function n(e,n){o.call(this,t.transportName,e,n)}return r(n,o),n.enabled=function(n,r){if(!e.document)return!1;var s=i.extend({},r);return s.sameOrigin=!0,t.enabled(s)&&o.enabled()},n.transportName="iframe-"+t.transportName,n.needBody=!0,n.roundTrips=o.roundTrips+t.roundTrips-1,n.facadeTransport=t,n}}).call(e,function(){return this}())},function(t,e,n){(function(e,r){"use strict";function o(t,e,n){l(t,e);var r=this;i.call(this),setTimeout(function(){r._start(t,e,n)},0)}var i=n(3).EventEmitter,s=n(0),a=n(6),c=n(10),u=n(4),l=function(){};"production"!==e.env.NODE_ENV&&(l=n(1)("sockjs-client:sender:xdr")),s(o,i),o.prototype._start=function(t,e,n){l("_start");var o=this,i=new r.XDomainRequest;e=u.addQuery(e,"t="+ +new Date),i.onerror=function(){l("onerror"),o._error()},i.ontimeout=function(){l("ontimeout"),o._error()},i.onprogress=function(){l("progress",i.responseText),o.emit("chunk",200,i.responseText)},i.onload=function(){l("load"),o.emit("finish",200,i.responseText),o._cleanup(!1)},this.xdr=i,this.unloadRef=a.unloadAdd(function(){o._cleanup(!0)});try{this.xdr.open(t,e),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(n)}catch(s){this._error()}},o.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},o.prototype._cleanup=function(t){if(l("cleanup",t),this.xdr){if(this.removeAllListeners(),a.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,t)try{this.xdr.abort()}catch(e){}this.unloadRef=this.xdr=null}},o.prototype.close=function(){l("close"),this._cleanup(!0)},o.enabled=!(!r.XDomainRequest||!c.hasDomain()),t.exports=o}).call(e,n(2),function(){return this}())},function(t,e){"use strict";t.exports={isObject:function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},extend:function(t){if(!this.isObject(t))return t;for(var e,n,r=1,o=arguments.length;o>r;r++){e=arguments[r];for(n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])}return t}}},function(t,e,n){"use strict";function r(t){var e=u.exec(t);return{protocol:e[1]?e[1].toLowerCase():"",slashes:!!e[2],rest:e[3]?e[3]:""}}function o(t,e,n){if(!(this instanceof o))return new o(t,e,n);var u,f,h,d,p=c.test(t),v=typeof e,m=this,y=0;"object"!==v&&"string"!==v&&(n=e,e=null),n&&"function"!=typeof n&&(n=a.parse),e=s(e);var b=r(t);for(m.protocol=b.protocol||e.protocol||"",m.slashes=b.slashes||e.slashes,t=b.rest;y<l.length;y++)f=l[y],u=f[0],d=f[1],u!==u?m[d]=t:"string"==typeof u?~(h=t.indexOf(u))&&("number"==typeof f[2]?(m[d]=t.slice(0,h),t=t.slice(h+f[2])):(m[d]=t.slice(h),t=t.slice(0,h))):(h=u.exec(t))&&(m[d]=h[1],t=t.slice(0,t.length-h[0].length)),m[d]=m[d]||(f[3]||"port"===d&&p?e[d]||"":""),f[4]&&(m[d]=m[d].toLowerCase());n&&(m.query=n(m.query)),i(m.port,m.protocol)||(m.host=m.hostname,m.port=""),m.username=m.password="",m.auth&&(f=m.auth.split(":"),m.username=f[0]||"",m.password=f[1]||""),m.href=m.toString()}var i=n(40),s=n(66),a=n(39),c=/^\/(?!\/)/,u=/^([a-z0-9.+-]+:)?(\/\/)?(.*)$/i,l=[["#","hash"],["?","query"],["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/\:(\d+)$/,"port"],[NaN,"hostname",void 0,1,1]];o.prototype.set=function(t,e,n){var r=this;return"query"===t?("string"==typeof e&&e.length&&(e=(n||a.parse)(e)),r[t]=e):"port"===t?(r[t]=e,i(e,r.protocol)?e&&(r.host=r.hostname+":"+e):(r.host=r.hostname,r[t]="")):"hostname"===t?(r[t]=e,r.port&&(e+=":"+r.port),r.host=e):"host"===t?(r[t]=e,/\:\d+/.test(e)&&(e=e.split(":"),r.hostname=e[0],r.port=e[1])):"protocol"===t?(r.protocol=e,r.slashes=!n):r[t]=e,r.href=r.toString(),r},o.prototype.toString=function(t){t&&"function"==typeof t||(t=a.stringify);var e,n=this,r=n.protocol;r&&":"!==r.charAt(r.length-1)&&(r+=":");var o=r+(n.slashes?"//":"");return n.username&&(o+=n.username,n.password&&(o+=":"+n.password),o+="@"),o+=n.hostname,n.port&&(o+=":"+n.port),o+=n.pathname,e="object"==typeof n.query?t(n.query):n.query,e&&(o+="?"!==e.charAt(0)?"?"+e:e),n.hash&&(o+=n.hash),o},o.qs=a,o.location=s,t.exports=o},function(t,e){"use strict";function n(){this._listeners={}}n.prototype.addEventListener=function(t,e){t in this._listeners||(this._listeners[t]=[]);var n=this._listeners[t];-1===n.indexOf(e)&&(n=n.concat([e])),this._listeners[t]=n},n.prototype.removeEventListener=function(t,e){var n=this._listeners[t];if(n){var r=n.indexOf(e);return-1!==r?void(n.length>1?this._listeners[t]=n.slice(0,r).concat(n.slice(r+1)):delete this._listeners[t]):void 0}},n.prototype.dispatchEvent=function(){var t=arguments[0],e=t.type,n=1===arguments.length?[t]:Array.apply(null,arguments);if(this["on"+e]&&this["on"+e].apply(this,n),e in this._listeners)for(var r=this._listeners[e],o=0;o<r.length;o++)r[o].apply(this,n)},t.exports=n},function(t,e,n){(function(e){"use strict";function r(t,e){o.call(this);var n=this,r=+new Date;this.xo=new e("GET",t),this.xo.once("finish",function(t,e){var o,i;if(200===t){if(i=+new Date-r,e)try{o=s.parse(e)}catch(u){c("bad json",e)}a.isObject(o)||(o={})}n.emit("finish",o,i),n.removeAllListeners()})}var o=n(3).EventEmitter,i=n(0),s=n(5),a=n(17),c=function(){};"production"!==e.env.NODE_ENV&&(c=n(1)("sockjs-client:info-ajax")),i(r,o),r.prototype.close=function(){this.removeAllListeners(),this.xo.close()},t.exports=r}).call(e,n(2))},function(t,e,n){"use strict";function r(t){var e=this;i.call(this),this.ir=new c(t,a),this.ir.once("finish",function(t,n){e.ir=null,e.emit("message",s.stringify([t,n]))})}var o=n(0),i=n(3).EventEmitter,s=n(5),a=n(9),c=n(20);o(r,i),r.transportName="iframe-info-receiver",r.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},t.exports=r},function(t,e){(function(e){"use strict";t.exports=e.location||{origin:"http://localhost:80",protocol:"http",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(e,function(){return this}())},function(t,e,n){(function(e,r){"use strict";function o(t,e,n,r){l(t,e);var o=this;i.call(this),setTimeout(function(){o._start(t,e,n,r)},0)}var i=n(3).EventEmitter,s=n(0),a=n(6),c=n(4),u=e.XMLHttpRequest,l=function(){};"production"!==r.env.NODE_ENV&&(l=n(1)("sockjs-client:browser:xhr")),s(o,i),o.prototype._start=function(t,e,n,r){var i=this;try{this.xhr=new u}catch(s){}if(!this.xhr)return l("no xhr"),this.emit("finish",0,"no xhr support"),void this._cleanup();e=c.addQuery(e,"t="+ +new Date),this.unloadRef=a.unloadAdd(function(){l("unload cleanup"),i._cleanup(!0)});try{this.xhr.open(t,e,!0),this.timeout&&"timeout"in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){l("xhr timeout"),i.emit("finish",0,""),i._cleanup(!1)})}catch(f){return l("exception",f),this.emit("finish",0,""),void this._cleanup(!1)}if(r&&r.noCredentials||!o.supportsCORS||(l("withCredentials"),this.xhr.withCredentials="true"),r&&r.headers)for(var h in r.headers)this.xhr.setRequestHeader(h,r.headers[h]);this.xhr.onreadystatechange=function(){if(i.xhr){var t,e,n=i.xhr;switch(l("readyState",n.readyState),n.readyState){case 3:try{e=n.status,t=n.responseText}catch(r){}l("status",e),1223===e&&(e=204),200===e&&t&&t.length>0&&(l("chunk"),i.emit("chunk",e,t));break;case 4:e=n.status,l("status",e),1223===e&&(e=204),12005!==e&&12029!==e||(e=0),l("finish",e,n.responseText),i.emit("finish",e,n.responseText),i._cleanup(!1)}}};try{i.xhr.send(n)}catch(f){i.emit("finish",0,""),i._cleanup(!1)}},o.prototype._cleanup=function(t){if(l("cleanup"),this.xhr){if(this.removeAllListeners(),a.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),t)try{this.xhr.abort()}catch(e){}this.unloadRef=this.xhr=null}},o.prototype.close=function(){l("close"),this._cleanup(!0)},o.enabled=!!u;var f=["Active"].concat("Object").join("X");!o.enabled&&f in e&&(l("overriding xmlhttprequest"),u=function(){try{return new e[f]("Microsoft.XMLHTTP")}catch(t){return null}},o.enabled=!!new u);var h=!1;try{h="withCredentials"in new u}catch(d){}o.supportsCORS=h,t.exports=o}).call(e,function(){return this}(),n(2))},function(t,e){(function(e){t.exports=e.EventSource}).call(e,function(){return this}())},function(t,e,n){"use strict";function r(t){if(!r.enabled())throw new Error("Transport created when disabled");i.call(this,t,"/eventsource",s,a)}var o=n(0),i=n(7),s=n(54),a=n(13),c=n(24);o(r,i),r.enabled=function(){return!!c},r.transportName="eventsource",r.roundTrips=2,t.exports=r},function(t,e,n){"use strict";function r(t){if(!i.enabled)throw new Error("Transport created when disabled");a.call(this,t,"/htmlfile",i,s)}var o=n(0),i=n(55),s=n(9),a=n(7);o(r,a),r.enabled=function(t){return i.enabled&&t.sameOrigin},r.transportName="htmlfile",r.roundTrips=2,t.exports=r},function(t,e,n){(function(e){"use strict";function r(t,e,n){if(!r.enabled())throw new Error("Transport created when disabled");s.call(this);var o=this;this.origin=c.getOrigin(n),this.baseUrl=n,this.transUrl=e,this.transport=t,this.windowId=f.string(8);var i=c.addPath(n,"/iframe.html")+"#"+this.windowId;h(t,e,i),this.iframeObj=u.createIframe(i,function(t){h("err callback"),o.emit("close",1006,"Unable to load an iframe ("+t+")"),o.close()}),this.onmessageCallback=this._message.bind(this),l.attachEvent("message",this.onmessageCallback)}var o=n(0),i=n(5),s=n(3).EventEmitter,a=n(31),c=n(4),u=n(11),l=n(6),f=n(8),h=function(){};"production"!==e.env.NODE_ENV&&(h=n(1)("sockjs-client:transport:iframe")),o(r,s),r.prototype.close=function(){if(h("close"),this.removeAllListeners(),this.iframeObj){l.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(t){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},r.prototype._message=function(t){if(h("message",t.data),!c.isOriginEqual(t.origin,this.origin))return void h("not same origin",t.origin,this.origin);var e;try{e=i.parse(t.data)}catch(n){return void h("bad json",t.data)}if(e.windowId!==this.windowId)return void h("mismatched window id",e.windowId,this.windowId);switch(e.type){case"s":this.iframeObj.loaded(),this.postMessage("s",i.stringify([a,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",e.data);break;case"c":var r;try{r=i.parse(e.data)}catch(n){return void h("bad json",e.data)}this.emit("close",r[0],r[1]),this.close()}},r.prototype.postMessage=function(t,e){h("postMessage",t,e),this.iframeObj.post(i.stringify({windowId:this.windowId,type:t,data:e||""}),this.origin)},r.prototype.send=function(t){h("send",t),this.postMessage("m",t)},r.enabled=function(){return u.iframeEnabled},r.transportName="iframe",r.roundTrips=2,t.exports=r}).call(e,n(2))},function(t,e,n){(function(e){"use strict";function r(t,e,n,r,o){var u=i.addPath(t,e);c(u);var l=this;s.call(this,t,n),this.poll=new a(r,u,o),this.poll.on("message",function(t){c("poll message",t),l.emit("message",t)}),this.poll.once("close",function(t,e){c("poll close",t,e),l.poll=null,l.emit("close",t,e),l.close()})}var o=n(0),i=n(4),s=n(52),a=n(53),c=function(){};"production"!==e.env.NODE_ENV&&(c=n(1)("sockjs-client:sender-receiver")),o(r,s),r.prototype.close=function(){c("close"),this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null),this.stop()},t.exports=r}).call(e,n(2))},function(t,e,n){"use strict";function r(t){if(!a.enabled)throw new Error("Transport created when disabled");i.call(this,t,"/xhr_streaming",s,a)}var o=n(0),i=n(7),s=n(12),a=n(16);o(r,i),r.enabled=function(t){return t.cookie_needed||t.nullOrigin?!1:a.enabled&&t.sameScheme},r.transportName="xdr-streaming",r.roundTrips=2,t.exports=r},function(t,e,n){"use strict";function r(t){if(!c.enabled&&!a.enabled)throw new Error("Transport created when disabled");i.call(this,t,"/xhr",s,a)}var o=n(0),i=n(7),s=n(12),a=n(13),c=n(9);o(r,i),r.enabled=function(t){return t.nullOrigin?!1:c.enabled&&t.sameOrigin?!0:a.enabled},r.transportName="xhr-polling",r.roundTrips=2,t.exports=r},function(t,e){t.exports="1.1.0"},function(t,e){"use strict";function n(t){console.log(t)}function r(t){console.warn(t)}function o(t){console.error(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.debug=n,e.warn=r,e.error=o},function(t,e){"use strict";function n(t,e){""!==e?alert(e):document.getElementById("connect").disabled=t}function r(t,e){""!==e?alert(e):document.getElementById("disconnect").disabled=t}function o(t){document.getElementById("id");console.log("content:"+t)}function i(t){alert("Invalid auth:"+t);var e=document.getElementsByClassName("auth")[0];e&&e.classList.remove("hidden")}function s(t){alert("Multiple auth:"+t);var e=document.getElementsByClassName("auth")[0];e&&e.classList.remove("hidden")}function a(t){alert("Not auth yet:"+t);var e=document.getElementsByClassName("auth")[0];e&&e.classList.remove("hidden")}Object.defineProperty(e,"__esModule",{value:!0}),e.setConnected=n,e.setDisconnected=r,e.setCountryChat=o,e.setInvalidAuth=i,e.setMultiAuth=s,e.setUnAuth=a},function(t,e,n){(function(e){"use strict";var r=n(49);t.exports=n(47)(r),"_sockjs_onload"in e&&setTimeout(e._sockjs_onload,1)}).call(e,function(){return this}())},function(t,e,n){!function(e,n){t.exports=n()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}Object.defineProperty(e,"__esModule",{value:!0});var o=n(1),i=r(o),s=n(3),a={VERSIONS:s.VERSIONS,client:function(t){var e=arguments.length<=1||void 0===arguments[1]?{protocols:s.VERSIONS.supportedProtocols()}:arguments[1],n=new WebSocket(t,e.protocols);return new i["default"](n,e)},over:function(){for(var t=arguments.length,e=Array(t),n=0;t>n;n++)e[n]=arguments[n];return new(Function.prototype.bind.apply(i["default"],[null].concat(e)))}};e["default"]=a,t.exports=e["default"]},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{"default":t}}function o(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),
!e||n.length!==e);r=!0);}catch(c){o=!0,i=c}finally{try{!r&&a["return"]&&a["return"]()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),s=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),a=n(2),c=r(a),u=n(3),l=function(){function t(e){var n=arguments.length<=1||void 0===arguments[1]?{binary:!1,heartbeat:{outgoing:1e4,incoming:1e4},debug:!0}:arguments[1];o(this,t),this.ws=e,this.ws.binaryType="arraybuffer",this.binary=n.binary,this.hasDebug=n.debug,this.counter=0,this.connected=!1,this.heartbeat=n.heartbeat||{outgoing:0,incoming:0},this.maxWebSocketFrameSize=16384,this.subscriptions={},this.partialData=""}return s(t,[{key:"debug",value:function(){var t;this.hasDebug&&(t=console).log.apply(t,arguments)}},{key:"connect",value:function(){var t=this,e=this._parseConnect.apply(this,arguments),n=i(e,3),r=n[0],o=n[1],s=n[2];this.connectCallback=o,this.debug("Opening Web Socket..."),this.ws.onmessage=function(e){var n=e.data;if(e.data instanceof ArrayBuffer&&(n=(0,u.typedArrayToUnicodeString)(new Uint8Array(e.data))),t.serverActivity=Date.now(),n===u.BYTES.LF)return void t.debug("<<< PONG");t.debug("<<< "+n);var r=c["default"].unmarshall(t.partialData+n);t.partialData=r.partial,r.frames.forEach(function(e){switch(e.command){case"CONNECTED":t.debug("connected to server "+e.headers.server),t.connected=!0,t.version=e.headers.version,t._setupHeartbeat(e.headers),o&&o(e);break;case"MESSAGE":var n=e.headers.subscription,r=t.subscriptions[n]||t.onreceive;if(r){var i=t.version===u.VERSIONS.V1_2&&e.headers.ack||e.headers["message-id"];e.ack=t.ack.bind(t,i,n),e.nack=t.nack.bind(t,i,n),r(e)}else t.debug("Unhandled received MESSAGE: "+e);break;case"RECEIPT":t.onreceipt&&t.onreceipt(e);break;case"ERROR":s&&s(e);break;default:t.debug("Unhandled frame: "+e)}})},this.ws.onclose=function(e){t.debug("Whoops! Lost connection to "+t.ws.url+":",e),t._cleanUp(),s&&s(e)},this.ws.onopen=function(){t.debug("Web Socket Opened..."),r["accept-version"]=u.VERSIONS.supportedVersions(),r["heart-beat"]=[t.heartbeat.outgoing,t.heartbeat.incoming].join(","),t._transmit("CONNECT",r)}}},{key:"disconnect",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];this._transmit("DISCONNECT",e),this.ws.onclose=null,this.ws.close(),this._cleanUp(),t&&t()}},{key:"send",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?"":arguments[1],n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];n.destination=t,this._transmit("SEND",n,e)}},{key:"begin",value:function(){var t=arguments.length<=0||void 0===arguments[0]?"tx-"+this.counter++:arguments[0];return this._transmit("BEGIN",{transaction:t}),{id:t,commit:this.commit.bind(this,t),abort:this.abort.bind(this,t)}}},{key:"commit",value:function(t){this._transmit("COMMIT",{transaction:t})}},{key:"abort",value:function(t){this._transmit("ABORT",{transaction:t})}},{key:"ack",value:function(t,e){var n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],r=this.version===u.VERSIONS.V1_2?"id":"message-id";n[r]=t,n.subscription=e,this._transmit("ACK",n)}},{key:"nack",value:function(t,e){var n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2],r=this.version===u.VERSIONS.V1_2?"id":"message-id";n[r]=t,n.subscription=e,this._transmit("NACK",n)}},{key:"subscribe",value:function(t,e){var n=arguments.length<=2||void 0===arguments[2]?{}:arguments[2];return n.id||(n.id="sub-"+this.counter++),n.destination=t,this.subscriptions[n.id]=e,this._transmit("SUBSCRIBE",n),{id:n.id,unsubscribe:this.unsubscribe.bind(this,n.id)}}},{key:"unsubscribe",value:function(t){var e=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];delete this.subscriptions[t],e.id=t,this._transmit("UNSUBSCRIBE",e)}},{key:"_cleanUp",value:function(){this.connected=!1,clearInterval(this.pinger),clearInterval(this.ponger)}},{key:"_transmit",value:function(t,e,n){var r=c["default"].marshall(t,e,n);this.debug(">>> "+r),this._wsSend(r)}},{key:"_wsSend",value:function(t){for(this.binary&&(t=(0,u.unicodeStringToTypedArray)(t)),this.debug(">>> length "+t.length);;){if(!(t.length>this.maxWebSocketFrameSize))return this.ws.send(t);this.ws.send(t.slice(0,this.maxWebSocketFrameSize)),t=t.slice(this.maxWebSocketFrameSize),this.debug("remaining = "+t.length)}}},{key:"_setupHeartbeat",value:function(t){var e=this;if(this.version===u.VERSIONS.V1_1||this.version===u.VERSIONS.V1_2){var n=(t["heart-beat"]||"0,0").split(",").map(function(t){return parseInt(t,10)}),r=i(n,2),o=r[0],s=r[1];if(0!==this.heartbeat.outgoing&&0!==s){var a=Math.max(this.heartbeat.outgoing,s);this.debug("send PING every "+a+"ms"),this.pinger=setInterval(function(){e._wsSend(u.BYTES.LF),e.debug(">>> PING")},a)}0!==this.heartbeat.incoming&&0!==o&&!function(){var t=Math.max(e.heartbeat.incoming,o);e.debug("check PONG every "+t+"ms"),e.ponger=setInterval(function(){var n=Date.now()-e.serverActivity;n>2*t&&(e.debug("did not receive server activity for the last "+n+"ms"),e.ws.close())},t)}()}}},{key:"_parseConnect",value:function(){for(var t={},e=void 0,n=void 0,r=arguments.length,o=Array(r),i=0;r>i;i++)o[i]=arguments[i];switch(o.length){case 2:t=o[0],e=o[1];break;case 3:o[1]instanceof Function?(t=o[0],e=o[1],n=o[2]):(t.login=o[0],t.passcode=o[1],e=o[2]);break;case 4:t.login=o[0],t.passcode=o[1],e=o[2],n=o[3];break;default:t.login=o[0],t.passcode=o[1],e=o[2],n=o[3],t.host=o[4]}return[t,e,n]}}]),t}();e["default"]=l,t.exports=e["default"]},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(3),s=function(){function t(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],o=arguments.length<=2||void 0===arguments[2]?"":arguments[2];r(this,t),this.command=e,this.headers=n,this.body=o}return o(t,[{key:"toString",value:function(){var t=this,e=[this.command],n=this.headers["content-length"]===!1;return n&&delete this.headers["content-length"],Object.keys(this.headers).forEach(function(n){var r=t.headers[n];e.push(n+":"+r)}),this.body&&!n&&e.push("content-length:"+(0,i.sizeOfUTF8)(this.body)),e.push(i.BYTES.LF+this.body),e.join(i.BYTES.LF)}}],[{key:"unmarshallSingle",value:function(e){var n=e.search(new RegExp(i.BYTES.LF+i.BYTES.LF)),r=e.substring(0,n).split(i.BYTES.LF),o=r.shift(),s={},a="",c=n+2,u=!0,l=!1,f=void 0;try{for(var h,d=r.reverse()[Symbol.iterator]();!(u=(h=d.next()).done);u=!0){var p=h.value,v=p.indexOf(":");s[(0,i.trim)(p.substring(0,v))]=(0,i.trim)(p.substring(v+1))}}catch(m){l=!0,f=m}finally{try{!u&&d["return"]&&d["return"]()}finally{if(l)throw f}}if(s["content-length"]){var y=parseInt(s["content-length"],10);a=(""+e).substring(c,c+y)}else for(var b=null,g=c;g<e.length&&(b=e.charAt(g),b!==i.BYTES.NULL);g++)a+=b;return new t(o,s,a)}},{key:"unmarshall",value:function(e){var n=e.split(new RegExp(i.BYTES.NULL+i.BYTES.LF+"*")),r=n.slice(0,-1),o=n.slice(-1)[0],s={frames:r.map(function(e){return t.unmarshallSingle(e)}),partial:""};return o===i.BYTES.LF||-1!==o.search(RegExp(i.BYTES.NULL+i.BYTES.LF+"*$"))?s.frames.push(t.unmarshallSingle(o)):s.partial=o,s}},{key:"marshall",value:function(e,n,r){var o=new t(e,n,r);return o.toString()+i.BYTES.NULL}}]),t}();e["default"]=s,t.exports=e["default"]},function(t,e){"use strict";function n(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}function r(t){var e=encodeURIComponent(t),n=e.replace(/%([0-9A-F]{2})/g,function(t,e){return String.fromCharCode("0x"+e)}),r=Array.prototype.map.call(n,function(t){return t.charCodeAt(0)});return new Uint8Array(r)}function o(t){var e=String.fromCharCode.apply(String,n(t)),r=e.replace(/(.)/g,function(t,e){var n=e.charCodeAt(0).toString(16).toUpperCase();return n.length<2&&(n="0"+n),"%"+n});return decodeURIComponent(r)}function i(t){return t?encodeURIComponent(t).match(/%..|./g).length:0}Object.defineProperty(e,"__esModule",{value:!0}),e.unicodeStringToTypedArray=r,e.typedArrayToUnicodeString=o,e.sizeOfUTF8=i;e.VERSIONS={V1_0:"1.0",V1_1:"1.1",V1_2:"1.2",supportedVersions:function(){return"1.2,1.1,1.0"},supportedProtocols:function(){return["v10.stomp","v11.stomp","v12.stomp"]}},e.BYTES={LF:"\n",NULL:"\x00"},e.trim=function(t){return t.replace(/^\s+|\s+$/g,"")}}])})},function(t,e,n){"use strict";function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e["default"]=t,e}function o(t){return t&&t.__esModule?t:{"default":t}}function i(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],e=t.errMsg,n=void 0===e?"":e,r=t.errorType,o=void 0===r?0:r,i=t.success,s=void 0===i?!0:i;this.errMsg=n,this.errorType=o,this.success=s}function s(){var t="https://192.168.11.106/demo",e="/channel/country",n="/user/errors",r="/chat/country",o="/chat/auth",s=1,a=2;this.client=null,this.isConnected=function(){return null!==this.client&&this.client.connected?!0:(v.warn("Not connected."),d.setCountryChat("!!!ERROR!!!Not connected"),!1)},this.connect=function(e){var n=new u["default"](t);this.client=f["default"].over(n),this.subscribes=[],this.client.connect({},function(t){d.setConnected(!0,""),v.debug("Connected OK."+t),e&&e(!0)},function(t){var n=JSON.stringify(t);d.setConnected(!1,n),v.error("Connected Error."+n),e&&e(!1)})},this.disconnect=function(){null!==this.client?(this.client.disconnect(),this.subscribes.length>0&&(this.subscribes.forEach(function(t,e,n){t&&t()}),this.subscribes=[]),d.setDisconnected(!0,""),v.debug("Disconnected.")):(d.setDisconnected(!1,"Null client."),v.error("Null client."))},this.countryChat=function(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0],n=t.time,o=(void 0===n?(new Date).toLocaleDateString():n,t.user,t.content),i=void 0===o?"":o;if(this.isConnected()){if(void 0===this.subscribes[s]){v.debug("Not subscribe country channel yet.");var a=this.client.subscribe(e,function(t){t&&v.debug("subscribe:"+JSON.stringify(t))},{id:s});this.subscribes[s]=a.unsubscribe}""!==i&&this.client.send(r,i,{})}},this.initError=function(){var t=this;return null!==this.client&&this.client.connected?void(void 0===this.subscribes[a]&&!function(){v.debug("Not subscribe error channel yet.");var e=t,r=t.client.subscribe(n,function(t){if(t){v.debug("subscribe:"+JSON.stringify(t));var n=new i(JSON.parse(t.body));n.success||e.dealError(n)}},{id:a});t.subscribes[a]=r.unsubscribe}()):(v.warn("Not connected."),void d.setCountryChat("!!!ERROR!!!Not connected"))},this.dealError=function(t){switch(t.errorType){case 1:d.setInvalidAuth(t.errMsg);break;case 2:d.setMultiAuth(t.errMsg);break;case 3:d.setUnAuth(t.errMsg);break;default:return void v.error("Invalid error type "+t.errorType)}},this.auth=function(t){this.isConnected()&&t&&this.client.send(o,JSON.stringify(t),{"content-type":"application/json;charset=UTF-8"})}}function a(){var t=document.getElementById("enter");t&&t.addEventListener("keydown",function(t){13===t.keyCode&&(m.countryChat({content:t.target.value}),t.preventDefault())});var e=document.getElementById("connect");e&&e.addEventListener("click",function(t){t.target.disabled||m.connect(function(t){t&&m.initError()})});var n=document.getElementById("disconnect");n&&n.addEventListener("click",function(t){t.target.disabled||m.disconnect()});var r=document.getElementsByClassName("auth")[0],o=document.getElementById("cancel");o&&r&&o.addEventListener("click",function(t){r.classList.add("hidden")});var i=document.getElementById("login");i&&r&&i.addEventListener("click",function(t){var e=document.getElementById("user");if(e){var n=document.getElementById("password");if(n){var o={user:e.value,password:n.value};m.auth(o),r.classList.add("hidden")}}})}var c=n(34),u=o(c),l=n(35),f=o(l),h=n(33),d=r(h),p=n(32),v=r(p),m=new s;document.addEventListener("DOMContentLoaded",a)},function(t,e,n){function r(){return e.colors[l++%e.colors.length]}function o(t){function n(){}function o(){var t=o,n=+new Date,i=n-(u||n);t.diff=i,t.prev=u,t.curr=n,u=n,null==t.useColors&&(t.useColors=e.useColors()),null==t.color&&t.useColors&&(t.color=r());var s=Array.prototype.slice.call(arguments);s[0]=e.coerce(s[0]),"string"!=typeof s[0]&&(s=["%o"].concat(s));var a=0;s[0]=s[0].replace(/%([a-z%])/g,function(n,r){if("%%"===n)return n;a++;var o=e.formatters[r];if("function"==typeof o){var i=s[a];n=o.call(t,i),s.splice(a,1),a--}return n}),"function"==typeof e.formatArgs&&(s=e.formatArgs.apply(t,s));var c=o.log||e.log||console.log.bind(console);c.apply(t,s)}n.enabled=!1,o.enabled=!0;var i=e.enabled(t)?o:n;return i.namespace=t,i}function i(t){e.save(t);for(var n=(t||"").split(/[\s,]+/),r=n.length,o=0;r>o;o++)n[o]&&(t=n[o].replace(/\*/g,".*?"),"-"===t[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))}function s(){e.enable("")}function a(t){var n,r;for(n=0,r=e.skips.length;r>n;n++)if(e.skips[n].test(t))return!1;for(n=0,r=e.names.length;r>n;n++)if(e.names[n].test(t))return!0;return!1}function c(t){return t instanceof Error?t.stack||t.message:t}e=t.exports=o,e.coerce=c,e.disable=s,e.enable=i,e.enabled=a,e.humanize=n(38),e.names=[],e.skips=[],e.formatters={};var u,l=0},function(t,e){function n(t){if(t=""+t,!(t.length>1e4)){var e=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(t);if(e){var n=parseFloat(e[1]),r=(e[2]||"ms").toLowerCase();switch(r){case"years":case"year":case"yrs":case"yr":case"y":return n*l;case"days":case"day":case"d":return n*u;case"hours":case"hour":case"hrs":case"hr":case"h":return n*c;case"minutes":case"minute":case"mins":case"min":case"m":return n*a;case"seconds":case"second":case"secs":case"sec":case"s":return n*s;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return n}}}}function r(t){return t>=u?Math.round(t/u)+"d":t>=c?Math.round(t/c)+"h":t>=a?Math.round(t/a)+"m":t>=s?Math.round(t/s)+"s":t+"ms"}function o(t){return i(t,u,"day")||i(t,c,"hour")||i(t,a,"minute")||i(t,s,"second")||t+" ms"}function i(t,e,n){return e>t?void 0:1.5*e>t?Math.floor(t/e)+" "+n:Math.ceil(t/e)+" "+n+"s"}var s=1e3,a=60*s,c=60*a,u=24*c,l=365.25*u;t.exports=function(t,e){return e=e||{},"string"==typeof t?n(t):e["long"]?o(t):r(t)}},function(t,e){"use strict";function n(t){for(var e,n=/([^=?&]+)=([^&]*)/g,r={};e=n.exec(t);r[decodeURIComponent(e[1])]=decodeURIComponent(e[2]));return r}function r(t,e){e=e||"";var n=[];"string"!=typeof e&&(e="?");for(var r in t)o.call(t,r)&&n.push(encodeURIComponent(r)+"="+encodeURIComponent(t[r]));return n.length?e+n.join("&"):""}var o=Object.prototype.hasOwnProperty;e.stringify=r,e.parse=n},function(t,e){"use strict";t.exports=function(t,e){if(e=e.split(":")[0],t=+t,!t)return!1;switch(e){case"http":case"ws":return 80!==t;case"https":case"wss":return 443!==t;case"ftp":return 21!==t;case"gopher":return 70!==t;case"file":return!1}return 0!==t}},function(t,e,n){"use strict";function r(){i.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}var o=n(0),i=n(14);o(r,i),t.exports=r},function(t,e,n){"use strict";function r(t){i.call(this),this.initEvent("message",!1,!1),this.data=t}var o=n(0),i=n(14);o(r,i),t.exports=r},function(t,e,n){"use strict";function r(t){this._transport=t,t.on("message",this._transportMessage.bind(this)),t.on("close",this._transportClose.bind(this))}var o=n(5),i=n(11);r.prototype._transportClose=function(t,e){i.postMessage("c",o.stringify([t,e]))},r.prototype._transportMessage=function(t){i.postMessage("t",t)},r.prototype._send=function(t){this._transport.send(t)},r.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},t.exports=r},function(t,e,n){(function(e){"use strict";var r=n(4),o=n(6),i=n(5),s=n(43),a=n(21),c=n(11),u=n(22),l=function(){};"production"!==e.env.NODE_ENV&&(l=n(1)("sockjs-client:iframe-bootstrap")),t.exports=function(t,e){var n={};e.forEach(function(t){t.facadeTransport&&(n[t.facadeTransport.transportName]=t.facadeTransport)}),n[a.transportName]=a;var f;t.bootstrap_iframe=function(){var e;c.currentWindowId=u.hash.slice(1);var a=function(o){if(o.source===parent&&("undefined"==typeof f&&(f=o.origin),o.origin===f)){var a;try{a=i.parse(o.data)}catch(h){return void l("bad json",o.data)}if(a.windowId===c.currentWindowId)switch(a.type){case"s":var d;try{d=i.parse(a.data)}catch(h){l("bad json",a.data);break}var p=d[0],v=d[1],m=d[2],y=d[3];if(l(p,v,m,y),p!==t.version)throw new Error('Incompatible SockJS! Main site uses: "'+p+'", the iframe: "'+t.version+'".');if(!r.isOriginEqual(m,u.href)||!r.isOriginEqual(y,u.href))throw new Error("Can't connect to different domain from within an iframe. ("+u.href+", "+m+", "+y+")");e=new s(new n[v](m,y));break;case"m":e._send(a.data);break;case"c":e&&e._close(),e=null}}};o.attachEvent("message",a),c.postMessage("s")}}}).call(e,n(2))},function(t,e,n){(function(e,r){"use strict";function o(t,e){var n=this;i.call(this);var o=function(){var r=n.ifr=new u(l.transportName,e,t);r.once("message",function(t){if(t){var e;try{e=a.parse(t)}catch(r){return f("bad json",t),n.emit("finish"),void n.close()}var o=e[0],i=e[1];n.emit("finish",o,i)}n.close()}),r.once("close",function(){n.emit("finish"),n.close()})};r.document.body?o():c.attachEvent("load",o)}var i=n(3).EventEmitter,s=n(0),a=n(5),c=n(6),u=n(27),l=n(21),f=function(){};"production"!==e.env.NODE_ENV&&(f=n(1)("sockjs-client:info-iframe")),s(o,i),o.enabled=function(){return u.enabled()},o.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},t.exports=o}).call(e,n(2),function(){return this}())},function(t,e,n){(function(e){"use strict";function r(t,e){d(t);var n=this;o.call(this),setTimeout(function(){n.doXhr(t,e)},0)}var o=n(3).EventEmitter,i=n(0),s=n(4),a=n(16),c=n(13),u=n(9),l=n(58),f=n(45),h=n(20),d=function(){};"production"!==e.env.NODE_ENV&&(d=n(1)("sockjs-client:info-receiver")),i(r,o),r._getReceiver=function(t,e,n){return n.sameOrigin?new h(e,u):c.enabled?new h(e,c):a.enabled&&n.sameScheme?new h(e,a):f.enabled()?new f(t,e):new h(e,l)},r.prototype.doXhr=function(t,e){var n=this,o=s.addPath(t,"/info");d("doXhr",o),this.xo=r._getReceiver(t,o,e),this.timeoutRef=setTimeout(function(){d("timeout"),n._cleanup(!1),n.emit("finish")},r.timeout),this.xo.once("finish",function(t,e){d("finish",t,e),n._cleanup(!0),n.emit("finish",t,e)})},r.prototype._cleanup=function(t){d("_cleanup"),clearTimeout(this.timeoutRef),this.timeoutRef=null,!t&&this.xo&&this.xo.close(),this.xo=null},r.prototype.close=function(){d("close"),this.removeAllListeners(),this._cleanup(!1)},r.timeout=8e3,t.exports=r}).call(e,n(2))},function(t,e,n){(function(e,r){"use strict";function o(t,e,n){if(!(this instanceof o))return new o(t,e,n);if(arguments.length<1)throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");b.call(this),this.readyState=o.CONNECTING,this.extensions="",this.protocol="",n=n||{},n.protocols_whitelist&&m.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=n.transports,this._transportOptions=n.transportOptions||{};var r=n.sessionId||8;if("function"==typeof r)this._generateSessionId=r;else{if("number"!=typeof r)throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");this._generateSessionId=function(){return u.string(r)}}this._server=n.server||u.numberString(1e3);var i=new s(t);if(!i.host||!i.protocol)throw new SyntaxError("The URL '"+t+"' is invalid");if(i.hash)throw new SyntaxError("The URL must not contain a fragment");if("http:"!==i.protocol&&"https:"!==i.protocol)throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+i.protocol+"' is not allowed.");var a="https:"===i.protocol;if("https"===g.protocol&&!a)throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS");e?Array.isArray(e)||(e=[e]):e=[];var c=e.sort();c.forEach(function(t,e){if(!t)throw new SyntaxError("The protocols entry '"+t+"' is invalid.");if(e<c.length-1&&t===c[e+1])throw new SyntaxError("The protocols entry '"+t+"' is duplicated.")});var l=f.getOrigin(g.href);this._origin=l?l.toLowerCase():null,i.set("pathname",i.pathname.replace(/\/+$/,"")),this.url=i.href,x("using url",this.url),this._urlInfo={nullOrigin:!v.hasDomain(),sameOrigin:f.isOriginEqual(this.url,g.href),sameScheme:f.isSchemeEqual(this.url,g.href)},this._ir=new _(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function i(t){return 1e3===t||t>=3e3&&4999>=t}n(48);var s=n(18),a=n(0),c=n(5),u=n(8),l=n(63),f=n(4),h=n(6),d=n(65),p=n(17),v=n(10),m=n(64),y=n(14),b=n(19),g=n(22),w=n(41),E=n(42),_=n(46),x=function(){};"production"!==e.env.NODE_ENV&&(x=n(1)("sockjs-client:main"));var S;a(o,b),o.prototype.close=function(t,e){if(t&&!i(t))throw new Error("InvalidAccessError: Invalid code");if(e&&e.length>123)throw new SyntaxError("reason argument has an invalid length");if(this.readyState!==o.CLOSING&&this.readyState!==o.CLOSED){var n=!0;this._close(t||1e3,e||"Normal closure",n)}},o.prototype.send=function(t){if("string"!=typeof t&&(t=""+t),this.readyState===o.CONNECTING)throw new Error("InvalidStateError: The connection has not been established yet");this.readyState===o.OPEN&&this._transport.send(l.quote(t))},o.version=n(31),o.CONNECTING=0,o.OPEN=1,o.CLOSING=2,o.CLOSED=3,o.prototype._receiveInfo=function(t,e){if(x("_receiveInfo",e),this._ir=null,!t)return void this._close(1002,"Cannot connect to server");this._rto=this.countRTO(e),this._transUrl=t.base_url?t.base_url:this.url,t=p.extend(t,this._urlInfo),x("info",t);var n=S.filterToEnabled(this._transportsWhitelist,t);this._transports=n.main,x(this._transports.length+" enabled transports"),this._connect()},o.prototype._connect=function(){for(var t=this._transports.shift();t;t=this._transports.shift()){if(x("attempt",t.transportName),t.needBody&&(!r.document.body||"undefined"!=typeof r.document.readyState&&"complete"!==r.document.readyState&&"interactive"!==r.document.readyState))return x("waiting for body"),this._transports.unshift(t),void h.attachEvent("load",this._connect.bind(this));var e=this._rto*t.roundTrips||5e3;this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),e),x("using timeout",e);var n=f.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId()),o=this._transportOptions[t.transportName];x("transport url",n);var i=new t(n,this._transUrl,o);return i.on("message",this._transportMessage.bind(this)),i.once("close",this._transportClose.bind(this)),i.transportName=t.transportName,void(this._transport=i)}this._close(2e3,"All transports failed",!1)},o.prototype._transportTimeout=function(){x("_transportTimeout"),this.readyState===o.CONNECTING&&this._transportClose(2007,"Transport timed out")},o.prototype._transportMessage=function(t){x("_transportMessage",t);var e,n=this,r=t.slice(0,1),o=t.slice(1);switch(r){case"o":return void this._open();case"h":return this.dispatchEvent(new y("heartbeat")),void x("heartbeat",this.transport)}if(o)try{e=c.parse(o)}catch(i){x("bad json",o)}if("undefined"==typeof e)return void x("empty payload",o);switch(r){case"a":Array.isArray(e)&&e.forEach(function(t){x("message",n.transport,t),n.dispatchEvent(new E(t))});break;case"m":x("message",this.transport,e),this.dispatchEvent(new E(e));break;case"c":Array.isArray(e)&&2===e.length&&this._close(e[0],e[1],!0)}},o.prototype._transportClose=function(t,e){return x("_transportClose",this.transport,t,e),this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),i(t)||2e3===t||this.readyState!==o.CONNECTING?void this._close(t,e):void this._connect()},o.prototype._open=function(){x("_open",this._transport.transportName,this.readyState),this.readyState===o.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=o.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new y("open")),x("connected",this.transport)):this._close(1006,"Server lost session")},o.prototype._close=function(t,e,n){x("_close",this.transport,t,e,n,this.readyState);var r=!1;if(this._ir&&(r=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===o.CLOSED)throw new Error("InvalidStateError: SockJS has already been closed");this.readyState=o.CLOSING,setTimeout(function(){this.readyState=o.CLOSED,r&&this.dispatchEvent(new y("error"));var i=new w("close");i.wasClean=n||!1,i.code=t||1e3,i.reason=e,this.dispatchEvent(i),this.onmessage=this.onclose=this.onerror=null,x("disconnected")}.bind(this),0)},o.prototype.countRTO=function(t){return t>100?4*t:300+t},t.exports=function(t){return S=d(t),n(44)(o,t),o}}).call(e,n(2),function(){return this}())},function(t,e){"use strict";function n(t){var e=+t;return e!==e?e=0:0!==e&&e!==1/0&&e!==-(1/0)&&(e=(e>0||-1)*Math.floor(Math.abs(e))),e}function r(t){return t>>>0}function o(){}var i,s=Array.prototype,a=Object.prototype,c=Function.prototype,u=String.prototype,l=s.slice,f=a.toString,h=function(t){return"[object Function]"===a.toString.call(t)},d=function(t){return"[object Array]"===f.call(t)},p=function(t){return"[object String]"===f.call(t)},v=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(t){return!1}}();i=v?function(t,e,n,r){!r&&e in t||Object.defineProperty(t,e,{configurable:!0,enumerable:!1,writable:!0,value:n})}:function(t,e,n,r){!r&&e in t||(t[e]=n)};var m=function(t,e,n){for(var r in e)a.hasOwnProperty.call(e,r)&&i(t,r,e[r],n)},y=function(t){if(null==t)throw new TypeError("can't convert "+t+" to object");return Object(t)};m(c,{bind:function(t){var e=this;if(!h(e))throw new TypeError("Function.prototype.bind called on incompatible "+e);for(var n=l.call(arguments,1),r=function(){if(this instanceof c){var r=e.apply(this,n.concat(l.call(arguments)));return Object(r)===r?r:this}return e.apply(t,n.concat(l.call(arguments)))},i=Math.max(0,e.length-n.length),s=[],a=0;i>a;a++)s.push("$"+a);var c=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this, arguments); }")(r);return e.prototype&&(o.prototype=e.prototype,c.prototype=new o,o.prototype=null),c}}),m(Array,{isArray:d});var b=Object("a"),g="a"!==b[0]||!(0 in b),w=function(t){var e=!0,n=!0;return t&&(t.call("foo",function(t,n,r){"object"!=typeof r&&(e=!1)}),t.call([1],function(){n="string"==typeof this},"x")),!!t&&e&&n};m(s,{forEach:function(t){var e=y(this),n=g&&p(this)?this.split(""):e,r=arguments[1],o=-1,i=n.length>>>0;if(!h(t))throw new TypeError;for(;++o<i;)o in n&&t.call(r,n[o],o,e)}},!w(s.forEach));var E=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);m(s,{indexOf:function(t){var e=g&&p(this)?this.split(""):y(this),r=e.length>>>0;if(!r)return-1;var o=0;for(arguments.length>1&&(o=n(arguments[1])),o=o>=0?o:Math.max(0,r+o);r>o;o++)if(o in e&&e[o]===t)return o;return-1}},E);var _=u.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?!function(){var t=void 0===/()??/.exec("")[1];u.split=function(e,n){var o=this;if(void 0===e&&0===n)return[];if("[object RegExp]"!==f.call(e))return _.call(this,e,n);var i,a,c,u,l=[],h=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.extended?"x":"")+(e.sticky?"y":""),d=0;for(e=new RegExp(e.source,h+"g"),o+="",t||(i=new RegExp("^"+e.source+"$(?!\\s)",h)),n=void 0===n?-1>>>0:r(n);(a=e.exec(o))&&(c=a.index+a[0].length,!(c>d&&(l.push(o.slice(d,a.index)),!t&&a.length>1&&a[0].replace(i,function(){for(var t=1;t<arguments.length-2;t++)void 0===arguments[t]&&(a[t]=void 0)}),a.length>1&&a.index<o.length&&s.push.apply(l,a.slice(1)),u=a[0].length,d=c,l.length>=n)));)e.lastIndex===a.index&&e.lastIndex++;return d===o.length?!u&&e.test("")||l.push(""):l.push(o.slice(d)),l.length>n?l.slice(0,n):l}}():"0".split(void 0,0).length&&(u.split=function(t,e){return void 0===t&&0===e?[]:_.call(this,t,e)});var x="	\n\x0B\f\r   ᠎             　\u2028\u2029\ufeff",S="​",O="["+x+"]",N=new RegExp("^"+O+O+"*"),T=new RegExp(O+O+"*$"),C=u.trim&&(x.trim()||!S.trim());m(u,{trim:function(){if(void 0===this||null===this)throw new TypeError("can't convert "+this+" to object");return String(this).replace(N,"").replace(T,"")}},C);var k=u.substr,j="".substr&&"b"!=="0b".substr(-1);m(u,{substr:function(t,e){return k.call(this,0>t&&(t=this.length+t)<0?0:t,e)}},j)},function(t,e,n){"use strict";t.exports=[n(59),n(61),n(29),n(25),n(15)(n(25)),n(26),n(15)(n(26)),n(30),n(60),n(15)(n(30)),n(51)]},function(t,e){(function(e){t.exports=e.WebSocket||e.MozWebSocket}).call(e,function(){return this}())},function(t,e,n){(function(e){"use strict";function r(t){if(!r.enabled())throw new Error("Transport created when disabled");i.call(this,t,"/jsonp",a,s)}var o=n(0),i=n(28),s=n(56),a=n(57);o(r,i),r.enabled=function(){return!!e.document},r.transportName="jsonp-polling",r.roundTrips=1,r.needBody=!0,t.exports=r}).call(e,function(){return this}())},function(t,e,n){(function(e){"use strict";function r(t,e){s(t),i.call(this),this.sendBuffer=[],this.sender=e,this.url=t}var o=n(0),i=n(3).EventEmitter,s=function(){};"production"!==e.env.NODE_ENV&&(s=n(1)("sockjs-client:buffered-sender")),o(r,i),r.prototype.send=function(t){s("send",t),this.sendBuffer.push(t),this.sendStop||this.sendSchedule()},r.prototype.sendScheduleWait=function(){s("sendScheduleWait");var t,e=this;this.sendStop=function(){s("sendStop"),e.sendStop=null,clearTimeout(t)},t=setTimeout(function(){s("timeout"),e.sendStop=null,e.sendSchedule()},25)},r.prototype.sendSchedule=function(){s("sendSchedule",this.sendBuffer.length);var t=this;if(this.sendBuffer.length>0){var e="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,e,function(e){t.sendStop=null,e?(s("error",e),t.emit("close",e.code||1006,"Sending error: "+e),t._cleanup()):t.sendScheduleWait()}),this.sendBuffer=[]}},r.prototype._cleanup=function(){s("_cleanup"),this.removeAllListeners()},r.prototype.stop=function(){s("stop"),this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},t.exports=r}).call(e,n(2))},function(t,e,n){(function(e){"use strict";function r(t,e,n){s(e),i.call(this),this.Receiver=t,this.receiveUrl=e,this.AjaxObject=n,this._scheduleReceiver()}var o=n(0),i=n(3).EventEmitter,s=function(){};"production"!==e.env.NODE_ENV&&(s=n(1)("sockjs-client:polling")),o(r,i),r.prototype._scheduleReceiver=function(){s("_scheduleReceiver");var t=this,e=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);e.on("message",function(e){s("message",e),t.emit("message",e)}),e.once("close",function(n,r){s("close",n,r,t.pollIsClosing),t.poll=e=null,t.pollIsClosing||("network"===r?t._scheduleReceiver():(t.emit("close",n||1006,r),t.removeAllListeners()))})},r.prototype.abort=function(){s("abort"),this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},t.exports=r}).call(e,n(2))},function(t,e,n){(function(e){"use strict";function r(t){a(t),i.call(this);var e=this,n=this.es=new s(t);n.onmessage=function(t){a("message",t.data),e.emit("message",decodeURI(t.data))},n.onerror=function(t){a("error",n.readyState,t);var r=2!==n.readyState?"network":"permanent";e._cleanup(),e._close(r)}}var o=n(0),i=n(3).EventEmitter,s=n(24),a=function(){};"production"!==e.env.NODE_ENV&&(a=n(1)("sockjs-client:receiver:eventsource")),o(r,i),r.prototype.abort=function(){
a("abort"),this._cleanup(),this._close("user")},r.prototype._cleanup=function(){a("cleanup");var t=this.es;t&&(t.onmessage=t.onerror=null,t.close(),this.es=null)},r.prototype._close=function(t){a("close",t);var e=this;setTimeout(function(){e.emit("close",null,t),e.removeAllListeners()},200)},t.exports=r}).call(e,n(2))},function(t,e,n){(function(e,r){"use strict";function o(t){l(t),c.call(this);var e=this;s.polluteGlobalNamespace(),this.id="a"+u.string(6),t=a.addQuery(t,"c="+decodeURIComponent(s.WPrefix+"."+this.id)),l("using htmlfile",o.htmlfileEnabled);var n=o.htmlfileEnabled?s.createHtmlfile:s.createIframe;r[s.WPrefix][this.id]={start:function(){l("start"),e.iframeObj.loaded()},message:function(t){l("message",t),e.emit("message",t)},stop:function(){l("stop"),e._cleanup(),e._close("network")}},this.iframeObj=n(t,function(){l("callback"),e._cleanup(),e._close("permanent")})}var i=n(0),s=n(11),a=n(4),c=n(3).EventEmitter,u=n(8),l=function(){};"production"!==e.env.NODE_ENV&&(l=n(1)("sockjs-client:receiver:htmlfile")),i(o,c),o.prototype.abort=function(){l("abort"),this._cleanup(),this._close("user")},o.prototype._cleanup=function(){l("_cleanup"),this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete r[s.WPrefix][this.id]},o.prototype._close=function(t){l("_close",t),this.emit("close",null,t),this.removeAllListeners()},o.htmlfileEnabled=!1;var f=["Active"].concat("Object").join("X");if(f in r)try{o.htmlfileEnabled=!!new r[f]("htmlfile")}catch(h){}o.enabled=o.htmlfileEnabled||s.iframeEnabled,t.exports=o}).call(e,n(2),function(){return this}())},function(t,e,n){(function(e,r){"use strict";function o(t){f(t);var e=this;l.call(this),i.polluteGlobalNamespace(),this.id="a"+s.string(6);var n=c.addQuery(t,"c="+encodeURIComponent(i.WPrefix+"."+this.id));r[i.WPrefix][this.id]=this._callback.bind(this),this._createScript(n),this.timeoutId=setTimeout(function(){f("timeout"),e._abort(new Error("JSONP script loaded abnormally (timeout)"))},o.timeout)}var i=n(11),s=n(8),a=n(10),c=n(4),u=n(0),l=n(3).EventEmitter,f=function(){};"production"!==e.env.NODE_ENV&&(f=n(1)("sockjs-client:receiver:jsonp")),u(o,l),o.prototype.abort=function(){if(f("abort"),r[i.WPrefix][this.id]){var t=new Error("JSONP user aborted read");t.code=1e3,this._abort(t)}},o.timeout=35e3,o.scriptErrorTimeout=1e3,o.prototype._callback=function(t){f("_callback",t),this._cleanup(),this.aborting||(t&&(f("message",t),this.emit("message",t)),this.emit("close",null,"network"),this.removeAllListeners())},o.prototype._abort=function(t){f("_abort",t),this._cleanup(),this.aborting=!0,this.emit("close",t.code,t.message),this.removeAllListeners()},o.prototype._cleanup=function(){if(f("_cleanup"),clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var t=this.script;t.parentNode.removeChild(t),t.onreadystatechange=t.onerror=t.onload=t.onclick=null,this.script=null}delete r[i.WPrefix][this.id]},o.prototype._scriptError=function(){f("_scriptError");var t=this;this.errorTimer||(this.errorTimer=setTimeout(function(){t.loadedOkay||t._abort(new Error("JSONP script loaded abnormally (onerror)"))},o.scriptErrorTimeout))},o.prototype._createScript=function(t){f("_createScript",t);var e,n=this,o=this.script=r.document.createElement("script");if(o.id="a"+s.string(8),o.src=t,o.type="text/javascript",o.charset="UTF-8",o.onerror=this._scriptError.bind(this),o.onload=function(){f("onload"),n._abort(new Error("JSONP script loaded abnormally (onload)"))},o.onreadystatechange=function(){if(f("onreadystatechange",o.readyState),/loaded|closed/.test(o.readyState)){if(o&&o.htmlFor&&o.onclick){n.loadedOkay=!0;try{o.onclick()}catch(t){}}o&&n._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},"undefined"==typeof o.async&&r.document.attachEvent)if(a.isOpera())e=this.script2=r.document.createElement("script"),e.text="try{var a = document.getElementById('"+o.id+"'); if(a)a.onerror();}catch(x){};",o.async=e.async=!1;else{try{o.htmlFor=o.id,o.event="onclick"}catch(i){}o.async=!0}"undefined"!=typeof o.async&&(o.async=!0);var c=r.document.getElementsByTagName("head")[0];c.insertBefore(o,c.firstChild),e&&c.insertBefore(e,c.firstChild)},t.exports=o}).call(e,n(2),function(){return this}())},function(t,e,n){(function(e,r){"use strict";function o(t){c("createIframe",t);try{return r.document.createElement('<iframe name="'+t+'">')}catch(e){var n=r.document.createElement("iframe");return n.name=t,n}}function i(){c("createForm"),u=r.document.createElement("form"),u.style.display="none",u.style.position="absolute",u.method="POST",u.enctype="application/x-www-form-urlencoded",u.acceptCharset="UTF-8",l=r.document.createElement("textarea"),l.name="d",u.appendChild(l),r.document.body.appendChild(u)}var s=n(8),a=n(4),c=function(){};"production"!==e.env.NODE_ENV&&(c=n(1)("sockjs-client:sender:jsonp"));var u,l;t.exports=function(t,e,n){c(t,e),u||i();var r="a"+s.string(8);u.target=r,u.action=a.addQuery(a.addPath(t,"/jsonp_send"),"i="+r);var f=o(r);f.id=r,f.style.display="none",u.appendChild(f);try{l.value=e}catch(h){}u.submit();var d=function(t){c("completed",r,t),f.onerror&&(f.onreadystatechange=f.onerror=f.onload=null,setTimeout(function(){c("cleaning up",r),f.parentNode.removeChild(f),f=null},500),l.value="",n(t))};return f.onerror=function(){c("onerror",r),d()},f.onload=function(){c("onload",r),d()},f.onreadystatechange=function(t){c("onreadystatechange",r,f.readyState,t),"complete"===f.readyState&&d()},function(){c("aborted",r),d(new Error("Aborted"))}}}).call(e,n(2),function(){return this}())},function(t,e,n){"use strict";function r(){var t=this;o.call(this),this.to=setTimeout(function(){t.emit("finish",200,"{}")},r.timeout)}var o=n(3).EventEmitter,i=n(0);i(r,o),r.prototype.close=function(){clearTimeout(this.to)},r.timeout=2e3,t.exports=r},function(t,e,n){(function(e){"use strict";function r(t,e,n){if(!r.enabled())throw new Error("Transport created when disabled");a.call(this),u("constructor",t);var s=this,l=i.addPath(t,"/websocket");l="https"===l.slice(0,5)?"wss"+l.slice(5):"ws"+l.slice(4),this.url=l,this.ws=new c(this.url,void 0,n),this.ws.onmessage=function(t){u("message event",t.data),s.emit("message",t.data)},this.unloadRef=o.unloadAdd(function(){u("unload"),s.ws.close()}),this.ws.onclose=function(t){u("close event",t.code,t.reason),s.emit("close",t.code,t.reason),s._cleanup()},this.ws.onerror=function(t){u("error event",t),s.emit("close",1006,"WebSocket connection broken"),s._cleanup()}}var o=n(6),i=n(4),s=n(0),a=n(3).EventEmitter,c=n(50),u=function(){};"production"!==e.env.NODE_ENV&&(u=n(1)("sockjs-client:websocket")),s(r,a),r.prototype.send=function(t){var e="["+t+"]";u("send",e),this.ws.send(e)},r.prototype.close=function(){u("close"),this.ws&&this.ws.close(),this._cleanup()},r.prototype._cleanup=function(){u("_cleanup");var t=this.ws;t&&(t.onmessage=t.onclose=t.onerror=null),o.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},r.enabled=function(){return u("enabled"),!!c},r.transportName="websocket",r.roundTrips=2,t.exports=r}).call(e,n(2))},function(t,e,n){"use strict";function r(t){if(!c.enabled)throw new Error("Transport created when disabled");i.call(this,t,"/xhr",a,c)}var o=n(0),i=n(7),s=n(29),a=n(12),c=n(16);o(r,i),r.enabled=s.enabled,r.transportName="xdr-polling",r.roundTrips=2,t.exports=r},function(t,e,n){(function(e){"use strict";function r(t){if(!c.enabled&&!a.enabled)throw new Error("Transport created when disabled");i.call(this,t,"/xhr_streaming",s,a)}var o=n(0),i=n(7),s=n(12),a=n(13),c=n(9),u=n(10);o(r,i),r.enabled=function(t){return t.nullOrigin?!1:u.isOpera()?!1:a.enabled},r.transportName="xhr-streaming",r.roundTrips=2,r.needBody=!!e.document,t.exports=r}).call(e,function(){return this}())},function(t,e){(function(e){"use strict";e.crypto&&e.crypto.getRandomValues?t.exports.randomBytes=function(t){var n=new Uint8Array(t);return e.crypto.getRandomValues(n),n}:t.exports.randomBytes=function(t){for(var e=new Array(t),n=0;t>n;n++)e[n]=Math.floor(256*Math.random());return e}}).call(e,function(){return this}())},function(t,e,n){"use strict";var r,o=n(5),i=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,s=function(t){var e,n={},r=[];for(e=0;65536>e;e++)r.push(String.fromCharCode(e));return t.lastIndex=0,r.join("").replace(t,function(t){return n[t]="\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4),""}),t.lastIndex=0,n};t.exports={quote:function(t){var e=o.stringify(t);return i.lastIndex=0,i.test(e)?(r||(r=s(i)),e.replace(i,function(t){return r[t]})):e}}},function(t,e){(function(e){"use strict";var n={};["log","debug","warn"].forEach(function(t){var r;try{r=e.console&&e.console[t]&&e.console[t].apply}catch(o){}n[t]=r?function(){return e.console[t].apply(e.console,arguments)}:"log"===t?function(){}:n.log}),t.exports=n}).call(e,function(){return this}())},function(t,e,n){(function(e){"use strict";var r=function(){};"production"!==e.env.NODE_ENV&&(r=n(1)("sockjs-client:utils:transport")),t.exports=function(t){return{filterToEnabled:function(e,n){var o={main:[],facade:[]};return e?"string"==typeof e&&(e=[e]):e=[],t.forEach(function(t){return t?"websocket"===t.transportName&&n.websocket===!1?void r("disabled from server","websocket"):e.length&&-1===e.indexOf(t.transportName)?void r("not in whitelist",t.transportName):void(t.enabled(n)?(r("enabled",t.transportName),o.main.push(t),t.facadeTransport&&o.facade.push(t.facadeTransport)):r("disabled",t.transportName)):void 0}),o}}}}).call(e,n(2))},function(t,e,n){(function(e){"use strict";var r,o=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,i={hash:1,query:1};t.exports=function(t){t=t||e.location||{},r=r||n(18);var s,a={},c=typeof t;if("blob:"===t.protocol)a=new r(unescape(t.pathname),{});else if("string"===c){a=new r(t,{});for(s in i)delete a[s]}else if("object"===c){for(s in t)s in i||(a[s]=t[s]);void 0===a.slashes&&(a.slashes=o.test(t.href))}return a}}).call(e,function(){return this}())},function(t,e){(function(e){t.exports=e}).call(e,{})},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children=[],Object.defineProperty(t,"loaded",{enumerable:!0,configurable:!1,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,configurable:!1,get:function(){return t.i}}),t.webpackPolyfill=1),t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,